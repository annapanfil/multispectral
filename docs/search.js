window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "multispectral", "modulename": "multispectral", "kind": "module", "doc": "<p>Surface litter detection on multispectral images captured from UAVs.</p>\n"}, {"fullname": "multispectral.dev", "modulename": "multispectral.dev", "kind": "module", "doc": "<p>Different scripts and notebooks used for:</p>\n\n<ul>\n<li>triggering the camera (Micasense RedEdge-P) on various ways</li>\n<li>comparing multispectral images with RGB and thermal images from H20T</li>\n<li>offline detection and making a video</li>\n<li>data analysis</li>\n<li>litter detection with custom algorithm (blob detection + SVM)</li>\n<li>visualising the images</li>\n<li>showing maps and videos</li>\n</ul>\n"}, {"fullname": "multispectral.dev.ap50_modifications", "modulename": "multispectral.dev.ap50_modifications", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "multispectral.dev.ap50_modifications.is_inside", "modulename": "multispectral.dev.ap50_modifications", "qualname": "is_inside", "kind": "function", "doc": "<p>Check if bounding box is inside any of the given bounding boxes.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>bb (int):</strong>  Bounding box index.</li>\n<li><strong>bbs (torch.Tensor):</strong>  Tensor of shape (N, 4) representing bounding boxes where each bounding box is of the\nformat: (x1, y1, x2, y2).</li>\n<li><strong>idx_filter (torch.Tensor):</strong>  Tensor of shape (M,) representing indices of bounding boxes to consider.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: index of the outside bounding box, None if not found.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bb</span>, </span><span class=\"param\"><span class=\"n\">bbs</span>, </span><span class=\"param\"><span class=\"n\">idx_filter</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.ap50_modifications.MyValidator", "modulename": "multispectral.dev.ap50_modifications", "qualname": "MyValidator", "kind": "class", "doc": "<p>A class extending the BaseValidator class for validation based on a detection model.</p>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">ultralytics.models.yolo.detect</span> <span class=\"kn\">import</span> <span class=\"n\">DetectionValidator</span>\n\n<span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"s2\">&quot;yolo11n.pt&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"s2\">&quot;coco8.yaml&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">validator</span> <span class=\"o\">=</span> <span class=\"n\">DetectionValidator</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"p\">)</span>\n<span class=\"n\">validator</span><span class=\"p\">()</span>\n</code></pre>\n  </div>\n</blockquote>\n", "bases": "ultralytics.models.yolo.detect.val.DetectionValidator"}, {"fullname": "multispectral.dev.ap50_modifications.MyValidator.__init__", "modulename": "multispectral.dev.ap50_modifications", "qualname": "MyValidator.__init__", "kind": "function", "doc": "<p>Initialize detection model with necessary variables and settings.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dataloader</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">save_dir</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">pbar</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">args</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">_callbacks</span><span class=\"o\">=</span><span class=\"p\">{}</span></span>)</span>"}, {"fullname": "multispectral.dev.ap50_modifications.MyValidator.additional_pred_bbs", "modulename": "multispectral.dev.ap50_modifications", "qualname": "MyValidator.additional_pred_bbs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "multispectral.dev.ap50_modifications.MyValidator.additional_confidences", "modulename": "multispectral.dev.ap50_modifications", "qualname": "MyValidator.additional_confidences", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "multispectral.dev.ap50_modifications.MyValidator.additional_pred_cls", "modulename": "multispectral.dev.ap50_modifications", "qualname": "MyValidator.additional_pred_cls", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "multispectral.dev.ap50_modifications.MyValidator.match_predictions", "modulename": "multispectral.dev.ap50_modifications", "qualname": "MyValidator.match_predictions", "kind": "function", "doc": "<p>Matches predictions to ground truth objects (pred_classes, true_classes) using IoU.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pred_classes (torch.Tensor):</strong>  Predicted class indices of shape(N,).</li>\n<li><strong>true_classes (torch.Tensor):</strong>  Target class indices of shape(M,).</li>\n<li><strong>iou (torch.Tensor):</strong>  An NxM tensor containing the pairwise IoU values for predictions and ground of truth</li>\n<li><strong>use_scipy (bool):</strong>  Whether to use scipy for matching (more precise).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(torch.Tensor): Correct tensor of shape(N,10) for 10 IoU thresholds.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pred_classes</span>, </span><span class=\"param\"><span class=\"n\">true_classes</span>, </span><span class=\"param\"><span class=\"n\">iou</span>, </span><span class=\"param\"><span class=\"n\">use_scipy</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.ap50_modifications.MyValidator.plot_detections", "modulename": "multispectral.dev.ap50_modifications", "qualname": "MyValidator.plot_detections", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">detections</span>, </span><span class=\"param\"><span class=\"n\">gt_bboxes</span>, </span><span class=\"param\"><span class=\"n\">matched_gt</span>, </span><span class=\"param\"><span class=\"n\">additional_matches</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.detect_on_all", "modulename": "multispectral.dev.detect_on_all", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "multispectral.dev.detect_on_all.main_processing", "modulename": "multispectral.dev.detect_on_all", "qualname": "main_processing", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img_dir</span>,</span><span class=\"param\">\t<span class=\"n\">bag_path</span>,</span><span class=\"param\">\t<span class=\"n\">out_path</span>,</span><span class=\"param\">\t<span class=\"n\">model_path</span>,</span><span class=\"param\">\t<span class=\"n\">panel_img_nr</span>,</span><span class=\"param\">\t<span class=\"n\">start_from</span>,</span><span class=\"param\">\t<span class=\"n\">end_on</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.detect_on_all.print_progress", "modulename": "multispectral.dev.detect_on_all", "qualname": "print_progress", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">current</span>, </span><span class=\"param\"><span class=\"n\">total</span>, </span><span class=\"param\"><span class=\"n\">start_time</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.detect_on_all.process_image", "modulename": "multispectral.dev.detect_on_all", "qualname": "process_image", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">msg</span>,</span><span class=\"param\">\t<span class=\"n\">img_dir</span>,</span><span class=\"param\">\t<span class=\"n\">panel_img_nr</span>,</span><span class=\"param\">\t<span class=\"n\">warp_matrices</span>,</span><span class=\"param\">\t<span class=\"n\">channels</span>,</span><span class=\"param\">\t<span class=\"n\">new_image_size</span>,</span><span class=\"param\">\t<span class=\"n\">is_complex</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.detect_on_all.process_batch", "modulename": "multispectral.dev.detect_on_all", "qualname": "process_batch", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">batch</span>, </span><span class=\"param\"><span class=\"n\">model</span>, </span><span class=\"param\"><span class=\"n\">output_queue</span>, </span><span class=\"param\"><span class=\"n\">future_map</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.detect_on_all.video_writer", "modulename": "multispectral.dev.detect_on_all", "qualname": "video_writer", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">output_queue</span>, </span><span class=\"param\"><span class=\"n\">out_path</span>, </span><span class=\"param\"><span class=\"n\">size</span>, </span><span class=\"param\"><span class=\"n\">fps</span>, </span><span class=\"param\"><span class=\"n\">start_from</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.detect_on_all.main", "modulename": "multispectral.dev.detect_on_all", "qualname": "main", "kind": "variable", "doc": "<p>Main function to process images and create a video with detections.</p>\n", "default_value": "&lt;Command main&gt;"}, {"fullname": "multispectral.dev.display", "modulename": "multispectral.dev.display", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "multispectral.dev.display.show_images", "modulename": "multispectral.dev.display", "qualname": "show_images", "kind": "function", "doc": "<p>Display a grid of images.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">images</span>, </span><span class=\"param\"><span class=\"n\">title</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.display.show_image", "modulename": "multispectral.dev.display", "qualname": "show_image", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span>, </span><span class=\"param\"><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">&#39;Image&#39;</span>, </span><span class=\"param\"><span class=\"n\">cmap_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;gray&#39;</span>, </span><span class=\"param\"><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.display.draw_rectangles", "modulename": "multispectral.dev.display", "qualname": "draw_rectangles", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">image</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">rectangles</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">shapes</span><span class=\"o\">.</span><span class=\"n\">Rectangle</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">strength</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.extract_raw_thermal_data_dji", "modulename": "multispectral.dev.extract_raw_thermal_data_dji", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "multispectral.dev.get_images", "modulename": "multispectral.dev.get_images", "kind": "module", "doc": "<p>Scripts for capturing multispectral images and comparing them with H20T images.</p>\n"}, {"fullname": "multispectral.dev.get_images.capture_and_save_image", "modulename": "multispectral.dev.get_images.capture_and_save_image", "kind": "module", "doc": "<p>Capture one photo using Micasense RedEdge-P http request and save all channels to separate files on disk.</p>\n"}, {"fullname": "multispectral.dev.get_images.capture_images_constantly", "modulename": "multispectral.dev.get_images.capture_images_constantly", "kind": "module", "doc": "<p>Capture images from a camera and save them to a ROS topic with altitude information.</p>\n"}, {"fullname": "multispectral.dev.get_images.capture_images_constantly.current_altitude", "modulename": "multispectral.dev.get_images.capture_images_constantly", "qualname": "current_altitude", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, {"fullname": "multispectral.dev.get_images.capture_images_constantly.printing_idx", "modulename": "multispectral.dev.get_images.capture_images_constantly", "qualname": "printing_idx", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, {"fullname": "multispectral.dev.get_images.capture_images_constantly.position_callback", "modulename": "multispectral.dev.get_images.capture_images_constantly", "qualname": "position_callback", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.get_images.capture_images_constantly.almost_equal", "modulename": "multispectral.dev.get_images.capture_images_constantly", "qualname": "almost_equal", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a</span>, </span><span class=\"param\"><span class=\"n\">b</span>, </span><span class=\"param\"><span class=\"n\">epsilon</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.get_images.capture_images_on_altitude", "modulename": "multispectral.dev.get_images.capture_images_on_altitude", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "multispectral.dev.get_images.capture_images_on_altitude.current_altitude", "modulename": "multispectral.dev.get_images.capture_images_on_altitude", "qualname": "current_altitude", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, {"fullname": "multispectral.dev.get_images.capture_images_on_altitude.printing_idx", "modulename": "multispectral.dev.get_images.capture_images_on_altitude", "qualname": "printing_idx", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, {"fullname": "multispectral.dev.get_images.capture_images_on_altitude.position_callback", "modulename": "multispectral.dev.get_images.capture_images_on_altitude", "qualname": "position_callback", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.get_images.capture_images_on_altitude.almost_equal", "modulename": "multispectral.dev.get_images.capture_images_on_altitude", "qualname": "almost_equal", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a</span>, </span><span class=\"param\"><span class=\"n\">b</span>, </span><span class=\"param\"><span class=\"n\">epsilon</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.get_images.capture_images_on_altitude_with_moving", "modulename": "multispectral.dev.get_images.capture_images_on_altitude_with_moving", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "multispectral.dev.get_images.capture_images_on_altitude_with_moving.current_altitude", "modulename": "multispectral.dev.get_images.capture_images_on_altitude_with_moving", "qualname": "current_altitude", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, {"fullname": "multispectral.dev.get_images.capture_images_on_altitude_with_moving.current_position", "modulename": "multispectral.dev.get_images.capture_images_on_altitude_with_moving", "qualname": "current_position", "kind": "variable", "doc": "<p></p>\n", "default_value": "(0, 0)"}, {"fullname": "multispectral.dev.get_images.capture_images_on_altitude_with_moving.printing_idx", "modulename": "multispectral.dev.get_images.capture_images_on_altitude_with_moving", "qualname": "printing_idx", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, {"fullname": "multispectral.dev.get_images.capture_images_on_altitude_with_moving.central_position", "modulename": "multispectral.dev.get_images.capture_images_on_altitude_with_moving", "qualname": "central_position", "kind": "variable", "doc": "<p></p>\n", "default_value": "(0, 0)"}, {"fullname": "multispectral.dev.get_images.capture_images_on_altitude_with_moving.previous_position", "modulename": "multispectral.dev.get_images.capture_images_on_altitude_with_moving", "qualname": "previous_position", "kind": "variable", "doc": "<p></p>\n", "default_value": "(0, 0)"}, {"fullname": "multispectral.dev.get_images.capture_images_on_altitude_with_moving.position_callback", "modulename": "multispectral.dev.get_images.capture_images_on_altitude_with_moving", "qualname": "position_callback", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.get_images.capture_images_on_altitude_with_moving.almost_equal", "modulename": "multispectral.dev.get_images.capture_images_on_altitude_with_moving", "qualname": "almost_equal", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a</span>, </span><span class=\"param\"><span class=\"n\">b</span>, </span><span class=\"param\"><span class=\"n\">epsilon</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.get_images.capture_images_on_altitude_with_moving.distance", "modulename": "multispectral.dev.get_images.capture_images_on_altitude_with_moving", "qualname": "distance", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">p1</span>, </span><span class=\"param\"><span class=\"n\">p2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.get_images.capture_images_on_altitude_with_moving.take_photo", "modulename": "multispectral.dev.get_images.capture_images_on_altitude_with_moving", "qualname": "take_photo", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">url</span>, </span><span class=\"param\"><span class=\"n\">current_altitude</span>, </span><span class=\"param\"><span class=\"n\">trigger_pub</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.get_images.capture_images_with_frequency", "modulename": "multispectral.dev.get_images.capture_images_with_frequency", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "multispectral.dev.get_images.capture_images_with_saving_to_ros_topic", "modulename": "multispectral.dev.get_images.capture_images_with_saving_to_ros_topic", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "multispectral.dev.get_images.capture_images_with_saving_to_ros_topic.current_altitude", "modulename": "multispectral.dev.get_images.capture_images_with_saving_to_ros_topic", "qualname": "current_altitude", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, {"fullname": "multispectral.dev.get_images.capture_images_with_saving_to_ros_topic.printing_idx", "modulename": "multispectral.dev.get_images.capture_images_with_saving_to_ros_topic", "qualname": "printing_idx", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, {"fullname": "multispectral.dev.get_images.capture_images_with_saving_to_ros_topic.position_callback", "modulename": "multispectral.dev.get_images.capture_images_with_saving_to_ros_topic", "qualname": "position_callback", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.get_images.capture_images_with_saving_to_ros_topic.almost_equal", "modulename": "multispectral.dev.get_images.capture_images_with_saving_to_ros_topic", "qualname": "almost_equal", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a</span>, </span><span class=\"param\"><span class=\"n\">b</span>, </span><span class=\"param\"><span class=\"n\">epsilon</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.get_images.check_camera_speed", "modulename": "multispectral.dev.get_images.check_camera_speed", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "multispectral.dev.get_images.get_all_images_from_dir", "modulename": "multispectral.dev.get_images.get_all_images_from_dir", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "multispectral.dev.get_time_difference", "modulename": "multispectral.dev.get_time_difference", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "multispectral.dev.litter_detection", "modulename": "multispectral.dev.litter_detection", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "multispectral.dev.litter_detection.find_pool", "modulename": "multispectral.dev.litter_detection", "qualname": "find_pool", "kind": "function", "doc": "<p>Get the dark, big rectangle from image \u2013 the pool</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">image</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">altitude</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">threshold</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">110</span>,</span><span class=\"param\">\t<span class=\"n\">verb</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">shapes</span><span class=\"o\">.</span><span class=\"n\">Rectangle</span>:</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.litter_detection.apply_dog", "modulename": "multispectral.dev.litter_detection", "qualname": "apply_dog", "kind": "function", "doc": "<p>Apply difference of gaussians</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">image</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">sigma</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mf\">0.03</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.litter_detection.pool2abs_rect", "modulename": "multispectral.dev.litter_detection", "qualname": "pool2abs_rect", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">bboxes</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">shapes</span><span class=\"o\">.</span><span class=\"n\">Rectangle</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">pool</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">shapes</span><span class=\"o\">.</span><span class=\"n\">Rectangle</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">shapes</span><span class=\"o\">.</span><span class=\"n\">Rectangle</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.litter_detection.pool2abs_point", "modulename": "multispectral.dev.litter_detection", "qualname": "pool2abs_point", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">point</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">pool</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">shapes</span><span class=\"o\">.</span><span class=\"n\">Rectangle</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.litter_detection.get_figures_from_contours", "modulename": "multispectral.dev.litter_detection", "qualname": "get_figures_from_contours", "kind": "function", "doc": "<p>Extract bounding boxes as rectangles and circles from the contours</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">contours</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">shapes</span><span class=\"o\">.</span><span class=\"n\">Rectangle</span><span class=\"p\">],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">shapes</span><span class=\"o\">.</span><span class=\"n\">Circle</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.litter_detection.detect_blobs", "modulename": "multispectral.dev.litter_detection", "qualname": "detect_blobs", "kind": "function", "doc": "<p>Get contours of blobs from the image</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">image</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">sigma</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span><span class=\"p\">],</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.litter_detection.find_litter", "modulename": "multispectral.dev.litter_detection", "qualname": "find_litter", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">image</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">im_name</span>,</span><span class=\"param\">\t<span class=\"n\">sigma</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">dog_threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">size_max_threshold_perc</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">verb</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">shapes</span><span class=\"o\">.</span><span class=\"n\">Rectangle</span><span class=\"p\">],</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">shapes</span><span class=\"o\">.</span><span class=\"n\">Rectangle</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.litter_detection.merge_rectangles", "modulename": "multispectral.dev.litter_detection", "qualname": "merge_rectangles", "kind": "function", "doc": "<p>merge rectangles that overlap to bigger rectangles</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">rects</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">shapes</span><span class=\"o\">.</span><span class=\"n\">Rectangle</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">margin</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">shapes</span><span class=\"o\">.</span><span class=\"n\">Rectangle</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.litter_detection.group_contours", "modulename": "multispectral.dev.litter_detection", "qualname": "group_contours", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">contours</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">margin</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">image</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.litter_detection.get_real_piles_size", "modulename": "multispectral.dev.litter_detection", "qualname": "get_real_piles_size", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">im_shape</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">altitude</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">cam_hfov</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">cam_vfov</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">rectangles</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.make_video_from_images", "modulename": "multispectral.dev.make_video_from_images", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "multispectral.dev.multispectral_img_gui", "modulename": "multispectral.dev.multispectral_img_gui", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "multispectral.dev.multispectral_img_gui.show_components_interactive", "modulename": "multispectral.dev.multispectral_img_gui", "qualname": "show_components_interactive", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img_aligned</span>, </span><span class=\"param\"><span class=\"n\">img_no</span><span class=\"o\">=</span><span class=\"s1\">&#39;0000&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.offline", "modulename": "multispectral.dev.offline", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "multispectral.dev.offline.detect_on_all", "modulename": "multispectral.dev.offline.detect_on_all", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "multispectral.dev.offline.detect_on_all.main_processing", "modulename": "multispectral.dev.offline.detect_on_all", "qualname": "main_processing", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img_dir</span>,</span><span class=\"param\">\t<span class=\"n\">bag_path</span>,</span><span class=\"param\">\t<span class=\"n\">out_path</span>,</span><span class=\"param\">\t<span class=\"n\">model_path</span>,</span><span class=\"param\">\t<span class=\"n\">panel_img_nr</span>,</span><span class=\"param\">\t<span class=\"n\">start_from</span>,</span><span class=\"param\">\t<span class=\"n\">end_on</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.offline.detect_on_all.print_progress", "modulename": "multispectral.dev.offline.detect_on_all", "qualname": "print_progress", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">current</span>, </span><span class=\"param\"><span class=\"n\">total</span>, </span><span class=\"param\"><span class=\"n\">start_time</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.offline.detect_on_all.process_image", "modulename": "multispectral.dev.offline.detect_on_all", "qualname": "process_image", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">msg</span>,</span><span class=\"param\">\t<span class=\"n\">img_dir</span>,</span><span class=\"param\">\t<span class=\"n\">panel_img_nr</span>,</span><span class=\"param\">\t<span class=\"n\">warp_matrices</span>,</span><span class=\"param\">\t<span class=\"n\">channels</span>,</span><span class=\"param\">\t<span class=\"n\">new_image_size</span>,</span><span class=\"param\">\t<span class=\"n\">is_complex</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.offline.detect_on_all.process_batch", "modulename": "multispectral.dev.offline.detect_on_all", "qualname": "process_batch", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">batch</span>, </span><span class=\"param\"><span class=\"n\">model</span>, </span><span class=\"param\"><span class=\"n\">output_queue</span>, </span><span class=\"param\"><span class=\"n\">future_map</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.offline.detect_on_all.video_writer", "modulename": "multispectral.dev.offline.detect_on_all", "qualname": "video_writer", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">output_queue</span>, </span><span class=\"param\"><span class=\"n\">out_path</span>, </span><span class=\"param\"><span class=\"n\">size</span>, </span><span class=\"param\"><span class=\"n\">fps</span>, </span><span class=\"param\"><span class=\"n\">start_from</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.offline.detect_on_all.main", "modulename": "multispectral.dev.offline.detect_on_all", "qualname": "main", "kind": "variable", "doc": "<p>Main function to process images and create a video with detections.</p>\n", "default_value": "&lt;Command main&gt;"}, {"fullname": "multispectral.dev.show", "modulename": "multispectral.dev.show", "kind": "module", "doc": "<p>For displaying the maps and videos offline and images online.</p>\n"}, {"fullname": "multispectral.dev.show.show_map_apads", "modulename": "multispectral.dev.show.show_map_apads", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "multispectral.dev.show.show_map_apads.app", "modulename": "multispectral.dev.show.show_map_apads", "qualname": "app", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;dash.dash.Dash object&gt;"}, {"fullname": "multispectral.dev.show.show_map_apads.latest_gps1", "modulename": "multispectral.dev.show.show_map_apads", "qualname": "latest_gps1", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "multispectral.dev.show.show_map_apads.latest_gps2", "modulename": "multispectral.dev.show.show_map_apads", "qualname": "latest_gps2", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "multispectral.dev.show.show_map_apads.gps1_path", "modulename": "multispectral.dev.show.show_map_apads", "qualname": "gps1_path", "kind": "variable", "doc": "<p></p>\n", "default_value": "[]"}, {"fullname": "multispectral.dev.show.show_map_apads.gps2_path", "modulename": "multispectral.dev.show.show_map_apads", "qualname": "gps2_path", "kind": "variable", "doc": "<p></p>\n", "default_value": "[]"}, {"fullname": "multispectral.dev.show.show_map_apads.map_start", "modulename": "multispectral.dev.show.show_map_apads", "qualname": "map_start", "kind": "variable", "doc": "<p></p>\n", "default_value": "[53.470129, 9.984008]"}, {"fullname": "multispectral.dev.show.show_map_apads.handle_gps1", "modulename": "multispectral.dev.show.show_map_apads", "qualname": "handle_gps1", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.show.show_map_apads.handle_gps2", "modulename": "multispectral.dev.show.show_map_apads", "qualname": "handle_gps2", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.show.show_map_apads.make_listener", "modulename": "multispectral.dev.show.show_map_apads", "qualname": "make_listener", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">url</span>, </span><span class=\"param\"><span class=\"n\">topic</span>, </span><span class=\"param\"><span class=\"n\">handler</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.show.show_map_apads.update_map", "modulename": "multispectral.dev.show.show_map_apads", "qualname": "update_map", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">_</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.show.show_map_multispectral", "modulename": "multispectral.dev.show.show_map_multispectral", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "multispectral.dev.show.show_map_multispectral.gps_topic_name", "modulename": "multispectral.dev.show.show_map_multispectral", "qualname": "gps_topic_name", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/dji_osdk_ros/gps_position&#x27;"}, {"fullname": "multispectral.dev.show.show_map_multispectral.map_start", "modulename": "multispectral.dev.show.show_map_multispectral", "qualname": "map_start", "kind": "variable", "doc": "<p></p>\n", "default_value": "[53.470129, 9.984008]"}, {"fullname": "multispectral.dev.show.show_map_multispectral.latest_gps", "modulename": "multispectral.dev.show.show_map_multispectral", "qualname": "latest_gps", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;lat&#x27;: 53.470129, &#x27;lon&#x27;: 9.984008}"}, {"fullname": "multispectral.dev.show.show_map_multispectral.video1_path", "modulename": "multispectral.dev.show.show_map_multispectral", "qualname": "video1_path", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/assets/multispectral.mp4&#x27;"}, {"fullname": "multispectral.dev.show.show_map_multispectral.video2_path", "modulename": "multispectral.dev.show.show_map_multispectral", "qualname": "video2_path", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/assets/hamburg_mapping.mp4&#x27;"}, {"fullname": "multispectral.dev.show.show_map_multispectral.gps_callback", "modulename": "multispectral.dev.show.show_map_multispectral", "qualname": "gps_callback", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.show.show_map_multispectral.ros_loop", "modulename": "multispectral.dev.show.show_map_multispectral", "qualname": "ros_loop", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.show.show_map_multispectral.signal_handler", "modulename": "multispectral.dev.show.show_map_multispectral", "qualname": "signal_handler", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sig</span>, </span><span class=\"param\"><span class=\"n\">frame</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.show.show_map_multispectral_live", "modulename": "multispectral.dev.show.show_map_multispectral_live", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "multispectral.dev.show.show_map_multispectral_live.app", "modulename": "multispectral.dev.show.show_map_multispectral_live", "qualname": "app", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;dash.dash.Dash object&gt;"}, {"fullname": "multispectral.dev.show.show_map_multispectral_live.latest_gps", "modulename": "multispectral.dev.show.show_map_multispectral_live", "qualname": "latest_gps", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "multispectral.dev.show.show_map_multispectral_live.gps_path", "modulename": "multispectral.dev.show.show_map_multispectral_live", "qualname": "gps_path", "kind": "variable", "doc": "<p></p>\n", "default_value": "[]"}, {"fullname": "multispectral.dev.show.show_map_multispectral_live.litter_gps", "modulename": "multispectral.dev.show.show_map_multispectral_live", "qualname": "litter_gps", "kind": "variable", "doc": "<p></p>\n", "default_value": "[]"}, {"fullname": "multispectral.dev.show.show_map_multispectral_live.map_start", "modulename": "multispectral.dev.show.show_map_multispectral_live", "qualname": "map_start", "kind": "variable", "doc": "<p></p>\n", "default_value": "[53.470129, 9.984008]"}, {"fullname": "multispectral.dev.show.show_map_multispectral_live.gps_topic", "modulename": "multispectral.dev.show.show_map_multispectral_live", "qualname": "gps_topic", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/dji_osdk_ros/gps_position&#x27;"}, {"fullname": "multispectral.dev.show.show_map_multispectral_live.gps_litter_topic", "modulename": "multispectral.dev.show.show_map_multispectral_live", "qualname": "gps_litter_topic", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/multispectral/pile_global_position&#x27;"}, {"fullname": "multispectral.dev.show.show_map_multispectral_live.video1_path", "modulename": "multispectral.dev.show.show_map_multispectral_live", "qualname": "video1_path", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/assets/multispectral.mp4&#x27;"}, {"fullname": "multispectral.dev.show.show_map_multispectral_live.video2_path", "modulename": "multispectral.dev.show.show_map_multispectral_live", "qualname": "video2_path", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/assets/hamburg_mapping.mp4&#x27;"}, {"fullname": "multispectral.dev.show.show_map_multispectral_live.ws_ip", "modulename": "multispectral.dev.show.show_map_multispectral_live", "qualname": "ws_ip", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;127.0.0.0&#x27;"}, {"fullname": "multispectral.dev.show.show_map_multispectral_live.handle_gps", "modulename": "multispectral.dev.show.show_map_multispectral_live", "qualname": "handle_gps", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.show.show_map_multispectral_live.handle_litter_gps", "modulename": "multispectral.dev.show.show_map_multispectral_live", "qualname": "handle_litter_gps", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.show.show_map_multispectral_live.make_listener", "modulename": "multispectral.dev.show.show_map_multispectral_live", "qualname": "make_listener", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">url</span>, </span><span class=\"param\"><span class=\"n\">topic</span>, </span><span class=\"param\"><span class=\"n\">handler</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.show.show_map_multispectral_live.update_map", "modulename": "multispectral.dev.show.show_map_multispectral_live", "qualname": "update_map", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">_</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.show.show_map_winch", "modulename": "multispectral.dev.show.show_map_winch", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "multispectral.dev.show.show_map_winch.app", "modulename": "multispectral.dev.show.show_map_winch", "qualname": "app", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;dash.dash.Dash object&gt;"}, {"fullname": "multispectral.dev.show.show_map_winch.latest_gps", "modulename": "multispectral.dev.show.show_map_winch", "qualname": "latest_gps", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "multispectral.dev.show.show_map_winch.latest_winch", "modulename": "multispectral.dev.show.show_map_winch", "qualname": "latest_winch", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "multispectral.dev.show.show_map_winch.gps_path", "modulename": "multispectral.dev.show.show_map_winch", "qualname": "gps_path", "kind": "variable", "doc": "<p></p>\n", "default_value": "[]"}, {"fullname": "multispectral.dev.show.show_map_winch.winch_path", "modulename": "multispectral.dev.show.show_map_winch", "qualname": "winch_path", "kind": "variable", "doc": "<p></p>\n", "default_value": "[]"}, {"fullname": "multispectral.dev.show.show_map_winch.handle_gps", "modulename": "multispectral.dev.show.show_map_winch", "qualname": "handle_gps", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.show.show_map_winch.handle_winch", "modulename": "multispectral.dev.show.show_map_winch", "qualname": "handle_winch", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.show.show_map_winch.make_listener", "modulename": "multispectral.dev.show.show_map_winch", "qualname": "make_listener", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">url</span>, </span><span class=\"param\"><span class=\"n\">topic</span>, </span><span class=\"param\"><span class=\"n\">handler</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.show.show_map_winch.update_graph", "modulename": "multispectral.dev.show.show_map_winch", "qualname": "update_graph", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">_</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.show.show_multispectral", "modulename": "multispectral.dev.show.show_multispectral", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "multispectral.dev.show.show_multispectral.get_args", "modulename": "multispectral.dev.show.show_multispectral", "qualname": "get_args", "kind": "function", "doc": "<p>Parse command line arguments.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.show.topic_image_viewer", "modulename": "multispectral.dev.show.topic_image_viewer", "kind": "module", "doc": "<p>Get images from a topic and optionally draw rectangles on them and publish the positions for debugging purposes.</p>\n"}, {"fullname": "multispectral.dev.show.topic_image_viewer.drawing", "modulename": "multispectral.dev.show.topic_image_viewer", "qualname": "drawing", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "multispectral.dev.show.topic_image_viewer.rect", "modulename": "multispectral.dev.show.topic_image_viewer", "qualname": "rect", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "multispectral.dev.show.topic_image_viewer.latest_img", "modulename": "multispectral.dev.show.topic_image_viewer", "qualname": "latest_img", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "multispectral.dev.show.topic_image_viewer.latest_img_name", "modulename": "multispectral.dev.show.topic_image_viewer", "qualname": "latest_img_name", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "multispectral.dev.show.topic_image_viewer.original_image_size", "modulename": "multispectral.dev.show.topic_image_viewer", "qualname": "original_image_size", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "multispectral.dev.show.topic_image_viewer.window_size", "modulename": "multispectral.dev.show.topic_image_viewer", "qualname": "window_size", "kind": "variable", "doc": "<p></p>\n", "default_value": "(669, 500)"}, {"fullname": "multispectral.dev.show.topic_image_viewer.image_callback", "modulename": "multispectral.dev.show.topic_image_viewer", "qualname": "image_callback", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.show.topic_image_viewer.draw_rect", "modulename": "multispectral.dev.show.topic_image_viewer", "qualname": "draw_rect", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">event</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">flags</span>, </span><span class=\"param\"><span class=\"n\">param</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.show.topic_image_viewer.process_rectangle", "modulename": "multispectral.dev.show.topic_image_viewer", "qualname": "process_rectangle", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image_pub</span>, </span><span class=\"param\"><span class=\"n\">pos_pixel_pub</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.show_indices", "modulename": "multispectral.dev.show_indices", "kind": "module", "doc": "<p>Compare different indices on the same image.</p>\n"}, {"fullname": "multispectral.dev.visualise", "modulename": "multispectral.dev.visualise", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "multispectral.dev.visualise.show_image", "modulename": "multispectral.dev.visualise", "qualname": "show_image", "kind": "function", "doc": "<p>Display an image with a given title.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image</span>, </span><span class=\"param\"><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">&#39;Image&#39;</span>, </span><span class=\"param\"><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">)</span>, </span><span class=\"param\"><span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;gray&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.visualise.save_image", "modulename": "multispectral.dev.visualise", "qualname": "save_image", "kind": "function", "doc": "<p>Save an image to a file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image</span>, </span><span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">bgr</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.visualise.get_components_view", "modulename": "multispectral.dev.visualise", "qualname": "get_components_view", "kind": "function", "doc": "<p>Visualise aligned image using the provided band indices and apply gamma correction.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img_aligned</span>, </span><span class=\"param\"><span class=\"n\">band_indices</span>, </span><span class=\"param\"><span class=\"n\">gamma</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.visualise.get_index_view", "modulename": "multispectral.dev.visualise", "qualname": "get_index_view", "kind": "function", "doc": "<p>Visualise image using two provided band indices. Used for NDVI, NDWI and other similar indices with a formula: (band1 - band2) / (band1 + band2)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img_aligned</span>, </span><span class=\"param\"><span class=\"n\">band1</span>, </span><span class=\"param\"><span class=\"n\">band2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.visualise.get_SR_image", "modulename": "multispectral.dev.visualise", "qualname": "get_SR_image", "kind": "function", "doc": "<p>Get normalised simple ratio (SR) image.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img_aligned</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.visualise.get_PI_image", "modulename": "multispectral.dev.visualise", "qualname": "get_PI_image", "kind": "function", "doc": "<p>Get normalised plastic index (PI) image.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img_aligned</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.visualise.plot_one_channel", "modulename": "multispectral.dev.visualise", "qualname": "plot_one_channel", "kind": "function", "doc": "<p>Plot a single normalised channel from the aligned image.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">im_aligned</span>, </span><span class=\"param\"><span class=\"n\">channel_nr</span><span class=\"o\">=</span><span class=\"mi\">5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.dev.visualise.plot_all_channels", "modulename": "multispectral.dev.visualise", "qualname": "plot_all_channels", "kind": "function", "doc": "<p>Plot all normalised channels from the aligned image in subplots.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">im_aligned</span>, </span><span class=\"param\"><span class=\"n\">out_fn</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">show</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src", "modulename": "multispectral.src", "kind": "module", "doc": "<p>Main module to take photos, preprocess them, run inference and postprocess. </p>\n\n<p>Main is only run on the drone.\nMain_drone and main_ground should be used together. Then the drone is capturing the photos and sending them via wifi to the ground computer, which does the next steps.</p>\n"}, {"fullname": "multispectral.src.get_panel", "modulename": "multispectral.src.get_panel", "kind": "module", "doc": "<p>Get one multispectral photo from the camera and save it to a directory.</p>\n"}, {"fullname": "multispectral.src.get_panel.receive_and_unpack_data", "modulename": "multispectral.src.get_panel", "qualname": "receive_and_unpack_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">conn</span>, </span><span class=\"param\"><span class=\"n\">decompressor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.get_panel.handle_incoming_image", "modulename": "multispectral.src.get_panel", "qualname": "handle_incoming_image", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">image_data</span>, </span><span class=\"param\"><span class=\"n\">image_groups</span>, </span><span class=\"param\"><span class=\"n\">panel_dir</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.get_panel.process_whole_img", "modulename": "multispectral.src.get_panel", "qualname": "process_whole_img", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">images</span>, </span><span class=\"param\"><span class=\"n\">panel_dir</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.get_panel.main", "modulename": "multispectral.src.get_panel", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.global_position_publisher", "modulename": "multispectral.src.global_position_publisher", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.global_position_publisher.CameraModel", "modulename": "multispectral.src.global_position_publisher", "qualname": "CameraModel", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.global_position_publisher.CameraModel.__init__", "modulename": "multispectral.src.global_position_publisher", "qualname": "CameraModel.__init__", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>camera_matrix :</strong>  [1661.03506282, 0.000000, 960.61997498, 0.000000, 1659.21818332, 536.34363925, 0.000000, 0.000000, 1.000000]</li>\n<li><strong>distortion_coefs:</strong>  [-0.00344134, -0.00067102, -0.00087853, 0.00110982, 0.000000]</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">camera_matrix</span>, </span><span class=\"param\"><span class=\"n\">distortion_coefs</span></span>)</span>"}, {"fullname": "multispectral.src.global_position_publisher.CameraModel.camera_matrix", "modulename": "multispectral.src.global_position_publisher", "qualname": "CameraModel.camera_matrix", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.global_position_publisher.CameraModel.distortion_coefs", "modulename": "multispectral.src.global_position_publisher", "qualname": "CameraModel.distortion_coefs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.global_position_publisher.CameraModel.camera_cord_pub", "modulename": "multispectral.src.global_position_publisher", "qualname": "CameraModel.camera_cord_pub", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.global_position_publisher.CameraModel.print_model_info", "modulename": "multispectral.src.global_position_publisher", "qualname": "CameraModel.print_model_info", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.global_position_publisher.CameraModel.get_obj_camera", "modulename": "multispectral.src.global_position_publisher", "qualname": "CameraModel.get_obj_camera", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>obj_px - (u,v) pixel coordinates of object</li>\n<li>camera_orientation_ned - (roll,pitch,yaw) matrice reported camera orientation in NED frame</li>\n<li>height - height of camera above ground plane</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>obj_cam - object surface position</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obj_px</span>, </span><span class=\"param\"><span class=\"n\">camera_orientation_ned</span>, </span><span class=\"param\"><span class=\"n\">height</span>, </span><span class=\"param\"><span class=\"n\">height_offset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.global_position_publisher.CameraModel.px_to_norm_cam", "modulename": "multispectral.src.global_position_publisher", "qualname": "CameraModel.px_to_norm_cam", "kind": "function", "doc": "<p>Convert pixel coordinates to normalized camera coordinates by inverting the calibration matrix and undistorting the input</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>obj_px - (u,v) pixel coordinates of object</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obj_px</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.global_position_publisher.CameraModel.get_rotation_matrix", "modulename": "multispectral.src.global_position_publisher", "qualname": "CameraModel.get_rotation_matrix", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">roll</span>, </span><span class=\"param\"><span class=\"n\">pitch</span>, </span><span class=\"param\"><span class=\"n\">yaw</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.global_position_publisher.ObjectGlobalPositionPublisher", "modulename": "multispectral.src.global_position_publisher", "qualname": "ObjectGlobalPositionPublisher", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.global_position_publisher.ObjectGlobalPositionPublisher.__init__", "modulename": "multispectral.src.global_position_publisher", "qualname": "ObjectGlobalPositionPublisher.__init__", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>topics = {\npx_cord : (px_cord_topic_name, topic_type)\ngps: (gps_topic_name, topic_type)\ngimbal : gimbal_topic_name, topic_type)</li>\n<li>}</li>\n<li>camera_model - CameraModel object to convert from pixel to drone relative coordinates</li>\n<li>rov_px_topic - topic for listening for pixel coordinates of the rov (PointStamped)</li>\n<li>geo_reference_pos - initial drone position GPS coordinates (lat,long,alt)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">camera_model</span>, </span><span class=\"param\"><span class=\"n\">geo_ref_pos</span>, </span><span class=\"param\"><span class=\"n\">topics</span>, </span><span class=\"param\"><span class=\"n\">height_offset</span><span class=\"o\">=</span><span class=\"mf\">0.0</span></span>)</span>"}, {"fullname": "multispectral.src.global_position_publisher.ObjectGlobalPositionPublisher.geo_reference_pos", "modulename": "multispectral.src.global_position_publisher", "qualname": "ObjectGlobalPositionPublisher.geo_reference_pos", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.global_position_publisher.ObjectGlobalPositionPublisher.camera_model", "modulename": "multispectral.src.global_position_publisher", "qualname": "ObjectGlobalPositionPublisher.camera_model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.global_position_publisher.ObjectGlobalPositionPublisher.height_offset", "modulename": "multispectral.src.global_position_publisher", "qualname": "ObjectGlobalPositionPublisher.height_offset", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.global_position_publisher.ObjectGlobalPositionPublisher.msgs", "modulename": "multispectral.src.global_position_publisher", "qualname": "ObjectGlobalPositionPublisher.msgs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.global_position_publisher.ObjectGlobalPositionPublisher.px_cord_sub", "modulename": "multispectral.src.global_position_publisher", "qualname": "ObjectGlobalPositionPublisher.px_cord_sub", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.global_position_publisher.ObjectGlobalPositionPublisher.gps_sub", "modulename": "multispectral.src.global_position_publisher", "qualname": "ObjectGlobalPositionPublisher.gps_sub", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.global_position_publisher.ObjectGlobalPositionPublisher.drone_att_sub", "modulename": "multispectral.src.global_position_publisher", "qualname": "ObjectGlobalPositionPublisher.drone_att_sub", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.global_position_publisher.ObjectGlobalPositionPublisher.height_sub", "modulename": "multispectral.src.global_position_publisher", "qualname": "ObjectGlobalPositionPublisher.height_sub", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.global_position_publisher.ObjectGlobalPositionPublisher.global_pos_pub", "modulename": "multispectral.src.global_position_publisher", "qualname": "ObjectGlobalPositionPublisher.global_pos_pub", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.global_position_publisher.ObjectGlobalPositionPublisher.world_enu_pub", "modulename": "multispectral.src.global_position_publisher", "qualname": "ObjectGlobalPositionPublisher.world_enu_pub", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.global_position_publisher.ObjectGlobalPositionPublisher.gps_utils", "modulename": "multispectral.src.global_position_publisher", "qualname": "ObjectGlobalPositionPublisher.gps_utils", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.global_position_publisher.ObjectGlobalPositionPublisher.start_publishing", "modulename": "multispectral.src.global_position_publisher", "qualname": "ObjectGlobalPositionPublisher.start_publishing", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.gps_utils", "modulename": "multispectral.src.gps_utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.gps_utils.GPS_utils", "modulename": "multispectral.src.gps_utils", "qualname": "GPS_utils", "kind": "class", "doc": "<p>Contains the algorithms to convert a gps signal (longitude, latitude, height)\nto a local cartesian ENU system and vice versa</p>\n\n<p>Use setENUorigin(lat, lon, height) to set the local ENU coordinate system origin\nUse geo2enu(lat, lon, height) to get the position in the local ENU system\nUse enu2geo(x_enu, y_enu, z_enu) to get the latitude, longitude and height</p>\n"}, {"fullname": "multispectral.src.gps_utils.GPS_utils.a", "modulename": "multispectral.src.gps_utils", "qualname": "GPS_utils.a", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.gps_utils.GPS_utils.b", "modulename": "multispectral.src.gps_utils", "qualname": "GPS_utils.b", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.gps_utils.GPS_utils.a2", "modulename": "multispectral.src.gps_utils", "qualname": "GPS_utils.a2", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.gps_utils.GPS_utils.b2", "modulename": "multispectral.src.gps_utils", "qualname": "GPS_utils.b2", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.gps_utils.GPS_utils.e2", "modulename": "multispectral.src.gps_utils", "qualname": "GPS_utils.e2", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.gps_utils.GPS_utils.e", "modulename": "multispectral.src.gps_utils", "qualname": "GPS_utils.e", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.gps_utils.GPS_utils.latZero", "modulename": "multispectral.src.gps_utils", "qualname": "GPS_utils.latZero", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.gps_utils.GPS_utils.lonZero", "modulename": "multispectral.src.gps_utils", "qualname": "GPS_utils.lonZero", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.gps_utils.GPS_utils.hgtZero", "modulename": "multispectral.src.gps_utils", "qualname": "GPS_utils.hgtZero", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.gps_utils.GPS_utils.xZero", "modulename": "multispectral.src.gps_utils", "qualname": "GPS_utils.xZero", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.gps_utils.GPS_utils.yZero", "modulename": "multispectral.src.gps_utils", "qualname": "GPS_utils.yZero", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.gps_utils.GPS_utils.zZero", "modulename": "multispectral.src.gps_utils", "qualname": "GPS_utils.zZero", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.gps_utils.GPS_utils.R", "modulename": "multispectral.src.gps_utils", "qualname": "GPS_utils.R", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.gps_utils.GPS_utils.setENUorigin", "modulename": "multispectral.src.gps_utils", "qualname": "GPS_utils.setENUorigin", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">lat</span>, </span><span class=\"param\"><span class=\"n\">lon</span>, </span><span class=\"param\"><span class=\"n\">height</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.gps_utils.GPS_utils.geo2ecef", "modulename": "multispectral.src.gps_utils", "qualname": "GPS_utils.geo2ecef", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">lat</span>, </span><span class=\"param\"><span class=\"n\">lon</span>, </span><span class=\"param\"><span class=\"n\">height</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.gps_utils.GPS_utils.ecef2enu", "modulename": "multispectral.src.gps_utils", "qualname": "GPS_utils.ecef2enu", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">z</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.gps_utils.GPS_utils.geo2enu", "modulename": "multispectral.src.gps_utils", "qualname": "GPS_utils.geo2enu", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">lat</span>, </span><span class=\"param\"><span class=\"n\">lon</span>, </span><span class=\"param\"><span class=\"n\">height</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.gps_utils.GPS_utils.ecef2geo", "modulename": "multispectral.src.gps_utils", "qualname": "GPS_utils.ecef2geo", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">z</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.gps_utils.GPS_utils.enu2ecef", "modulename": "multispectral.src.gps_utils", "qualname": "GPS_utils.enu2ecef", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">z</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.gps_utils.GPS_utils.enu2geo", "modulename": "multispectral.src.gps_utils", "qualname": "GPS_utils.enu2geo", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">z</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.image_receiver", "modulename": "multispectral.src.image_receiver", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.image_sender", "modulename": "multispectral.src.image_sender", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.main", "modulename": "multispectral.src.main", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.main.main", "modulename": "multispectral.src.main", "qualname": "main", "kind": "function", "doc": "<p>Main function for detection and pile positioning. (NOT TESTED YET)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.main_drone", "modulename": "multispectral.src.main_drone", "kind": "module", "doc": "<p>Main script for online processing when the photos are received from the drone and processed on the ground. (Drone side)</p>\n"}, {"fullname": "multispectral.src.main_drone.almost_equal", "modulename": "multispectral.src.main_drone", "qualname": "almost_equal", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a</span>, </span><span class=\"param\"><span class=\"n\">b</span>, </span><span class=\"param\"><span class=\"n\">epsilon</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.main_drone.get_image_from_camera", "modulename": "multispectral.src.main_drone", "qualname": "get_image_from_camera", "kind": "function", "doc": "<p>Capture photo and download it\nif output_dir is not None, save the image to disk and return the path\nelse return the image as numpy array</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">url</span>, </span><span class=\"param\"><span class=\"n\">params</span>, </span><span class=\"param\"><span class=\"n\">output_dir</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.main_drone.get_image_from_local_directory", "modulename": "multispectral.src.main_drone", "qualname": "get_image_from_local_directory", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">&#39;/home/anna/Datasets/raw_images/pool/realistic_trash/0034SET/000&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">img_nr</span><span class=\"o\">=</span><span class=\"s1\">&#39;0004&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.main_drone.send_compressed_from_dir", "modulename": "multispectral.src.main_drone", "qualname": "send_compressed_from_dir", "kind": "function", "doc": "<p>Compress the image and return the filename and compressed image in binary format.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span>, </span><span class=\"param\"><span class=\"n\">cctx</span>, </span><span class=\"param\"><span class=\"n\">sock</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.main_drone.save_image", "modulename": "multispectral.src.main_drone", "qualname": "save_image", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">output_dir</span>, </span><span class=\"param\"><span class=\"n\">response</span>, </span><span class=\"param\"><span class=\"n\">ch</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.main_ground", "modulename": "multispectral.src.main_ground", "kind": "module", "doc": "<p>Main script for online processing when the photos are received from the drone and processed on the ground. (ground_side)</p>\n"}, {"fullname": "multispectral.src.main_ground.panel_capt", "modulename": "multispectral.src.main_ground", "qualname": "panel_capt", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "multispectral.src.main_ground.warp_matrices", "modulename": "multispectral.src.main_ground", "qualname": "warp_matrices", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "multispectral.src.main_ground.model", "modulename": "multispectral.src.main_ground", "qualname": "model", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "multispectral.src.main_ground.pos_pixel_pub", "modulename": "multispectral.src.main_ground", "qualname": "pos_pixel_pub", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "multispectral.src.main_ground.image_pub", "modulename": "multispectral.src.main_ground", "qualname": "image_pub", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "multispectral.src.main_ground.formula", "modulename": "multispectral.src.main_ground", "qualname": "formula", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;(N - (E - N))&#x27;"}, {"fullname": "multispectral.src.main_ground.channels", "modulename": "multispectral.src.main_ground", "qualname": "channels", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;N&#x27;, &#x27;G&#x27;, &#x27;(N - (E - N))&#x27;]"}, {"fullname": "multispectral.src.main_ground.is_complex", "modulename": "multispectral.src.main_ground", "qualname": "is_complex", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "multispectral.src.main_ground.new_image_size", "modulename": "multispectral.src.main_ground", "qualname": "new_image_size", "kind": "variable", "doc": "<p></p>\n", "default_value": "(800, 608)"}, {"fullname": "multispectral.src.main_ground.original_image_size", "modulename": "multispectral.src.main_ground", "qualname": "original_image_size", "kind": "variable", "doc": "<p></p>\n", "default_value": "(1456, 1088)"}, {"fullname": "multispectral.src.main_ground.DEBUG", "modulename": "multispectral.src.main_ground", "qualname": "DEBUG", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "multispectral.src.main_ground.receive_and_unpack_data", "modulename": "multispectral.src.main_ground", "qualname": "receive_and_unpack_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">conn</span>, </span><span class=\"param\"><span class=\"n\">decompressor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.main_ground.handle_incoming_image", "modulename": "multispectral.src.main_ground", "qualname": "handle_incoming_image", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">image_data</span>, </span><span class=\"param\"><span class=\"n\">image_groups</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.main_ground.process_whole_img", "modulename": "multispectral.src.main_ground", "qualname": "process_whole_img", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">group_key</span>, </span><span class=\"param\"><span class=\"n\">images</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.main_ground.send_outcomes", "modulename": "multispectral.src.main_ground", "qualname": "send_outcomes", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">bboxes</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">shapes</span><span class=\"o\">.</span><span class=\"n\">Rectangle</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">group_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">image_pub</span>,</span><span class=\"param\">\t<span class=\"n\">pos_pixel_pub</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.main_ground.exit_threads", "modulename": "multispectral.src.main_ground", "qualname": "exit_threads", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">executor</span>, </span><span class=\"param\"><span class=\"n\">server</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.main_ground.main", "modulename": "multispectral.src.main_ground", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.processing", "modulename": "multispectral.src.processing", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.processing.consts", "modulename": "multispectral.src.processing.consts", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.processing.consts.normalised_difference", "modulename": "multispectral.src.processing.consts", "qualname": "normalised_difference", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a</span>, </span><span class=\"param\"><span class=\"n\">b</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.processing.consts.CHANNELS", "modulename": "multispectral.src.processing.consts", "qualname": "CHANNELS", "kind": "variable", "doc": "<p>Mapping of channel names to their indices.</p>\n", "default_value": "{&#x27;B&#x27;: 0, &#x27;G&#x27;: 1, &#x27;R&#x27;: 2, &#x27;N&#x27;: 3, &#x27;E&#x27;: 4}"}, {"fullname": "multispectral.src.processing.consts.CHANNEL_NAMES", "modulename": "multispectral.src.processing.consts", "qualname": "CHANNEL_NAMES", "kind": "variable", "doc": "<p>List of channel names in the order they are used in the MicaSense RedEdge camera.</p>\n", "default_value": "[&#x27;B&#x27;, &#x27;G&#x27;, &#x27;R&#x27;, &#x27;N&#x27;, &#x27;E&#x27;]"}, {"fullname": "multispectral.src.processing.consts.NAMES_CONVERSION", "modulename": "multispectral.src.processing.consts", "qualname": "NAMES_CONVERSION", "kind": "variable", "doc": "<p>Mapping channel names with different abbreviations to the one letter ones.</p>\n", "default_value": "{&#x27;RE&#x27;: &#x27;E&#x27;, &#x27;NIR&#x27;: &#x27;N&#x27;}"}, {"fullname": "multispectral.src.processing.consts.EPSILON", "modulename": "multispectral.src.processing.consts", "qualname": "EPSILON", "kind": "variable", "doc": "<p></p>\n", "default_value": "1e-10"}, {"fullname": "multispectral.src.processing.consts.OPERATIONS", "modulename": "multispectral.src.processing.consts", "qualname": "OPERATIONS", "kind": "variable", "doc": "<p>Operations that can be used in the formula (dict).</p>\n", "default_value": "{&#x27;+&#x27;: &lt;built-in function add&gt;, &#x27;-&#x27;: &lt;built-in function sub&gt;, &#x27;*&#x27;: &lt;built-in function mul&gt;, &#x27;/&#x27;: &lt;function &lt;lambda&gt;&gt;, &#x27;#&#x27;: &lt;function normalised_difference&gt;}"}, {"fullname": "multispectral.src.processing.consts.CAM_HFOV", "modulename": "multispectral.src.processing.consts", "qualname": "CAM_HFOV", "kind": "variable", "doc": "<p>Camera horizontal field of view in radians.</p>\n", "default_value": "0.8656833089891874"}, {"fullname": "multispectral.src.processing.consts.CAM_VFOV", "modulename": "multispectral.src.processing.consts", "qualname": "CAM_VFOV", "kind": "variable", "doc": "<p>Camera vertical field of view in radians.</p>\n", "default_value": "0.6684611035138281"}, {"fullname": "multispectral.src.processing.consts.CAMERA_MATRIX", "modulename": "multispectral.src.processing.consts", "qualname": "CAMERA_MATRIX", "kind": "variable", "doc": "<p>Camera matrix for the MicaSense RedEdge camera (for channel 0).</p>\n", "default_value": "[[1575.3, 0, 714.41], [0, 1575.3, 471.71], [0, 0, 1]]"}, {"fullname": "multispectral.src.processing.consts.DISTORTION_COEFFS", "modulename": "multispectral.src.processing.consts", "qualname": "DISTORTION_COEFFS", "kind": "variable", "doc": "<p>Distortion coefficients for the MicaSense RedEdge camera (for channel 0). In order: k1, k2, p1, p2, k3</p>\n", "default_value": "[-0.08933, 0.11349, -0.00045258, 0.00056019, 0.0085821]"}, {"fullname": "multispectral.src.processing.evaluate_index", "modulename": "multispectral.src.processing.evaluate_index", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.processing.evaluate_index.evaluate_postfix", "modulename": "multispectral.src.processing.evaluate_index", "qualname": "evaluate_postfix", "kind": "function", "doc": "<p>Evaluate a prefix expression.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>expression (str):</strong>  The prefix expression (e.g., \"#RG\").</li>\n<li><strong>variables (dict):</strong>  A dictionary of variable values.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The result of the expression.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">expression</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">variables</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.processing.evaluate_index.is_operator", "modulename": "multispectral.src.processing.evaluate_index", "qualname": "is_operator", "kind": "function", "doc": "<p>Check if the character is an operator \u2013 any character that is neither an alphabet letter nor a digit.\nParameters:\nc (str): The character to check.\nReturns:\nbool: True if the character is an operator, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">c</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.processing.evaluate_index.get_priority", "modulename": "multispectral.src.processing.evaluate_index", "qualname": "get_priority", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">c</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.processing.evaluate_index.infix_to_postfix", "modulename": "multispectral.src.processing.evaluate_index", "qualname": "infix_to_postfix", "kind": "function", "doc": "<p>Convert an infix expression to a postfix expression.\nThis function takes an infix expression (a mathematical notation where operators are placed between operands)\nand converts it to a postfix expression (also known as Reverse Polish Notation, where operators follow their operands).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>infix (str):</strong>  The infix expression to be converted.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The resulting postfix expression.</p>\n</blockquote>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infix_to_postfix</span><span class=\"p\">(</span><span class=\"s2\">&quot;A*(B+C)/D&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;ABC+*D/&#39;</span>\n</code></pre>\n  </div>\n</blockquote>\n\n<h6 id=\"note\">Note:</h6>\n\n<blockquote>\n  <p>This function assumes that the input infix expression is valid and contains only single-letter variables,\n  digits, and the operators +, -, *, /, and ^. Parentheses are also supported for grouping.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">infix</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.processing.evaluate_index.get_custom_index", "modulename": "multispectral.src.processing.evaluate_index", "qualname": "get_custom_index", "kind": "function", "doc": "<p>Get a custom index from an image using your formula.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>formula (str):</strong>  The formula to calculate the index.</li>\n<li><strong>img_aligned (np.array):</strong>  The image.</li>\n<li><strong>norm_to_255 (bool):</strong>  If True, before calculating the index normalize the channels to [0, 255], which sometimes works better for more complex formulas because of the numerical issues. (default: False)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.array: The calculated index.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">formula</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">img_aligned</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">norm_to_255</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.processing.load", "modulename": "multispectral.src.processing.load", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.processing.load.time_decorator", "modulename": "multispectral.src.processing.load", "qualname": "time_decorator", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.processing.load.load_not_aligned", "modulename": "multispectral.src.processing.load", "qualname": "load_not_aligned", "kind": "function", "doc": "<p>Loads a set of images that are not aligned and aligns them using precomputed warp matrices.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>image_dir (str):</strong>  Directory containing the images.</li>\n<li><strong>image_nr (str):</strong>  Identifier for the image set.</li>\n<li><strong>panel_image_nr (int):</strong>  Identifier for the panel image.</li>\n<li><strong>altitude (int):</strong>  Altitude at which the images were captured.</li>\n<li><strong>warp_matrices_path (str, optional):</strong>  Path to the directory containing the warp matrices. Defaults to \"/home/anna/code/multispectral/out/warp_matrices_reference/\".</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: Aligned images as a NumPy array.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">image_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">image_nr</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">panel_image_nr</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">altitude</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">warp_matrices_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/home/anna/code/multispectral/out/warp_matrices_reference/&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.processing.load.load_aligned", "modulename": "multispectral.src.processing.load", "qualname": "load_aligned", "kind": "function", "doc": "<p>Loads and aligns a set of multispectral images from a specified directory.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>image_path (str):</strong>  Path to the folder containing the images.</li>\n<li><strong>image_number (str):</strong>  Number of the capture to be displayed in format like: 0024 or part of image name without the channel.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: A numpy array containing the stacked images with shape (height, width, 6).</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If the number of images found is not equal to 6.</li>\n<li><strong>ValueError:</strong>  If the shapes of the images differ by more than 10 pixels in any dimension.</li>\n</ul>\n\n<h6 id=\"warns\">Warns:</h6>\n\n<blockquote>\n  <p>Warning: If the shapes of the images differ by less than 10 pixels, they will be resized to match the first image's shape.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">image_number</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.processing.load.get_altitude", "modulename": "multispectral.src.processing.load", "qualname": "get_altitude", "kind": "function", "doc": "<p>Read altitude based on the information from exif and config file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>cfg (hydra config):</strong>  Configuration object containing parameters and paths.</li>\n<li><strong>image_nr (str):</strong>  Image number to identify the specific image file.</li>\n<li><strong>i (int):</strong>  Index to access altitude or altitude change from a list if applicable.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The altitude value.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>SystemExit:</strong>  If the altitude cannot be read from the exif data and is not provided in the config file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cfg</span>, </span><span class=\"param\"><span class=\"n\">image_nr</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.processing.load.find_images", "modulename": "multispectral.src.processing.load", "qualname": "find_images", "kind": "function", "doc": "<p>Find images for a given capture number.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>image_path (Path):</strong>  The path to the directory containing the images.</li>\n<li><strong>image_number (str):</strong>  The capture number of the images to find or part of image name without the channel.</li>\n<li><strong>panel (bool, optional):</strong>  True if we search for panel images. Defaults to False.</li>\n<li><strong>with_set (bool, optional):</strong>  Internal parameter to handle recursive search. Defaults to None.</li>\n<li><strong>no_panchromatic (bool, optional):</strong>  If True, exclude panchromatic images (ch6). Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: A list of image file paths as strings.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>FileNotFoundError:</strong>  If no images are found for the given capture number.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">image_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">image_number</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">panel</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">with_set</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">no_panchromatic</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.processing.load.load_image_set", "modulename": "multispectral.src.processing.load", "qualname": "load_image_set", "kind": "function", "doc": "<p>Load 6 images into one capture object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>image_path (str):</strong>  Path to the directory containing the images.</li>\n<li><strong>image_number (str):</strong>  Number of the capture to be displayed.</li>\n<li><strong>panel_image_number (str, optional):</strong>  Number of the capture with a calibration QR code.</li>\n<li><strong>no_panchromatic (bool, optional):</strong>  If True, exclude panchromatic images (ch6). Defaults to True.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple: A tuple containing the image capture object and the panel capture object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">image_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;/home/anna/Obrazy/multispectral/0001SET/000/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">image_number</span><span class=\"o\">=</span><span class=\"s1\">&#39;0000&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">panel_image_number</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">no_panchromatic</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.processing.load.get_irradiance", "modulename": "multispectral.src.processing.load", "qualname": "get_irradiance", "kind": "function", "doc": "<p>Get irradiance and image type and display.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>img_capt (Capture):</strong>  The image capture.</li>\n<li><strong>panel_capt (Capture):</strong>  The panel capture.</li>\n<li><strong>display (bool, optional):</strong>  Whether to display the images. Defaults to False.</li>\n<li><strong>vignetting (bool, optional):</strong>  Whether to apply vignetting correction for reflectance. Defaults to True.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: 'reflectance' or 'radiance'</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img_capt</span>, </span><span class=\"param\"><span class=\"n\">panel_capt</span>, </span><span class=\"param\"><span class=\"n\">display</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">vignetting</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.processing.load.save_warp_matrices", "modulename": "multispectral.src.processing.load", "qualname": "save_warp_matrices", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">warp_matrices</span>, </span><span class=\"param\"><span class=\"n\">fn</span><span class=\"o\">=</span><span class=\"s1\">&#39;./out/warp_matrices_SIFT.npy&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.processing.load.read_warp_matrices_for_SIFT", "modulename": "multispectral.src.processing.load", "qualname": "read_warp_matrices_for_SIFT", "kind": "function", "doc": "<p>Read warp matrices and transform them into ProjectiveTransform objects</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fn</span><span class=\"o\">=</span><span class=\"s1\">&#39;./out/warp_matrices_SIFT.npy&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.processing.load.load_all_warp_matrices", "modulename": "multispectral.src.processing.load", "qualname": "load_all_warp_matrices", "kind": "function", "doc": "<p>Load all warp matrices from the specified directory.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>warp_matrices_dir (str):</strong>  The directory containing the warp matrices.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict: A dictionary mapping altitudes to their corresponding warp matrices.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">warp_matrices_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.processing.load.get_warp_mat_for_altitude", "modulename": "multispectral.src.processing.load", "qualname": "get_warp_mat_for_altitude", "kind": "function", "doc": "<p>Get saved matrices from warp_matrices_dir with the given altitude.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>warp_matrices (dict):</strong>  Dictionary containing warp matrices for different altitudes.</li>\n<li><strong>altitude (int):</strong>  The altitude for which the matrices should be loaded.   </li>\n<li><strong>allow_closest (bool):</strong>  If the matrices file is not found, get the closest one by the altitude.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.array: The warp matrices.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">warp_matrices</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">altitude</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">allow_closest</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">verb</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.processing.load.get_saved_matrices", "modulename": "multispectral.src.processing.load", "qualname": "get_saved_matrices", "kind": "function", "doc": "<p>Get saved matrices from warp_matrices_dir with the given altitude.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>warp_matrices_dir (str):</strong>  The directory containing the warp matrices.</li>\n<li><strong>altitude (int):</strong>  The altitude for which the matrices should be loaded.</li>\n<li><strong>allow_closest (bool):</strong>  If the matrices file is not found, get the closest one by the altitude.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.array: The warp matrices.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">warp_matrices_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">altitude</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">allow_closest</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.processing.load.align_rig_relatives", "modulename": "multispectral.src.processing.load", "qualname": "align_rig_relatives", "kind": "function", "doc": "<p>align using rig relatives</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">capt</span>, </span><span class=\"param\"><span class=\"n\">img_type</span>, </span><span class=\"param\"><span class=\"n\">reference_band</span><span class=\"o\">=</span><span class=\"mi\">5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.processing.load.align_SIFT", "modulename": "multispectral.src.processing.load", "qualname": "align_SIFT", "kind": "function", "doc": "<p>Align and sharpen multispectral images using SIFT algorithm.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>capture (Capture):</strong>  The Capture object containing the multispectral images to be aligned.</li>\n<li><strong>img_type (str):</strong>  The type of image data, e.g., 'reflectance' or 'radiance'.</li>\n<li><strong>irradiance_list (list):</strong>  List of irradiance values for each band.</li>\n<li><strong>matrices_fn (str, optional):</strong>  Path to the file containing the warp matrices. Defaults to \"./out/warp_matrices_SIFT.npy\".</li>\n<li><strong>verbose (int, optional):</strong>  Verbosity level. Defaults to 0.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>numpy.ndarray: The radiometrically pan-sharpened and aligned image stack.\n  list: List of aligned images before pan-sharpening.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">capture</span>,</span><span class=\"param\">\t<span class=\"n\">img_type</span>,</span><span class=\"param\">\t<span class=\"n\">irradiance_list</span>,</span><span class=\"param\">\t<span class=\"n\">matrices_fn</span><span class=\"o\">=</span><span class=\"s1\">&#39;./out/warp_matrices_SIFT.npy&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.processing.load.align_iterative", "modulename": "multispectral.src.processing.load", "qualname": "align_iterative", "kind": "function", "doc": "<p>align iteratively</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">capture</span>, </span><span class=\"param\"><span class=\"n\">img_type</span>, </span><span class=\"param\"><span class=\"n\">reference_band</span><span class=\"o\">=</span><span class=\"mi\">5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.processing.load.align_from_saved_matrices", "modulename": "multispectral.src.processing.load", "qualname": "align_from_saved_matrices", "kind": "function", "doc": "<p>Align images using precomputed warp matrices.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>capture:</strong>  The image capture object containing the images to be aligned.</li>\n<li><strong>img_type (str):</strong>  'reflectance' or 'radiance'</li>\n<li><strong>warp_matrices_dir (str):</strong>  Directory path where the warp matrices are stored.</li>\n<li><strong>altitude (int):</strong>  The altitude at which the images were captured.</li>\n<li><strong>allow_closest (bool, optional):</strong>  If True, if the matrices file is not found, get the closest one by the altitude. Defaults to False.</li>\n<li><strong>reference_band (int, optional):</strong>  The index of the reference band for alignment. Defaults to 5.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>im_aligned: The aligned image capture object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">capture</span>,</span><span class=\"param\">\t<span class=\"n\">img_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">warp_matrices_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">altitude</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">allow_closest</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">reference_band</span><span class=\"o\">=</span><span class=\"mi\">5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.run_create_dataset", "modulename": "multispectral.src.run_create_dataset", "kind": "module", "doc": "<p>Create datasets for all the developed formulas and send them to the remote host</p>\n"}, {"fullname": "multispectral.src.run_create_dataset.run_job", "modulename": "multispectral.src.run_create_dataset", "qualname": "run_job", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">job</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.shapes", "modulename": "multispectral.src.shapes", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.shapes.Circle", "modulename": "multispectral.src.shapes", "qualname": "Circle", "kind": "class", "doc": "<p>Circle(x, y, r)</p>\n", "bases": "builtins.tuple"}, {"fullname": "multispectral.src.shapes.Circle.__init__", "modulename": "multispectral.src.shapes", "qualname": "Circle.__init__", "kind": "function", "doc": "<p>Create new instance of Circle(x, y, r)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">r</span></span>)</span>"}, {"fullname": "multispectral.src.shapes.Circle.x", "modulename": "multispectral.src.shapes", "qualname": "Circle.x", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n"}, {"fullname": "multispectral.src.shapes.Circle.y", "modulename": "multispectral.src.shapes", "qualname": "Circle.y", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n"}, {"fullname": "multispectral.src.shapes.Circle.r", "modulename": "multispectral.src.shapes", "qualname": "Circle.r", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n"}, {"fullname": "multispectral.src.shapes.Rectangle", "modulename": "multispectral.src.shapes", "qualname": "Rectangle", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.shapes.Rectangle.__init__", "modulename": "multispectral.src.shapes", "qualname": "Rectangle.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x_l</span>, </span><span class=\"param\"><span class=\"n\">y_b</span>, </span><span class=\"param\"><span class=\"n\">x_r</span>, </span><span class=\"param\"><span class=\"n\">y_t</span>, </span><span class=\"param\"><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;Rectangle&#39;</span></span>)</span>"}, {"fullname": "multispectral.src.shapes.Rectangle.x_l", "modulename": "multispectral.src.shapes", "qualname": "Rectangle.x_l", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.shapes.Rectangle.y_b", "modulename": "multispectral.src.shapes", "qualname": "Rectangle.y_b", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.shapes.Rectangle.x_r", "modulename": "multispectral.src.shapes", "qualname": "Rectangle.x_r", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.shapes.Rectangle.y_t", "modulename": "multispectral.src.shapes", "qualname": "Rectangle.y_t", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.shapes.Rectangle.label", "modulename": "multispectral.src.shapes", "qualname": "Rectangle.label", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.shapes.Rectangle.from_xywh", "modulename": "multispectral.src.shapes", "qualname": "Rectangle.from_xywh", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">center</span>, </span><span class=\"param\"><span class=\"n\">width</span>, </span><span class=\"param\"><span class=\"n\">height</span>, </span><span class=\"param\"><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;Rectangle&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.shapes.Rectangle.width", "modulename": "multispectral.src.shapes", "qualname": "Rectangle.width", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.shapes.Rectangle.height", "modulename": "multispectral.src.shapes", "qualname": "Rectangle.height", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.shapes.Rectangle.center", "modulename": "multispectral.src.shapes", "qualname": "Rectangle.center", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.shapes.Rectangle.area", "modulename": "multispectral.src.shapes", "qualname": "Rectangle.area", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.shapes.Rectangle.intersection", "modulename": "multispectral.src.shapes", "qualname": "Rectangle.intersection", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">margin</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.shapes.Rectangle.union", "modulename": "multispectral.src.shapes", "qualname": "Rectangle.union", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.shapes.Rectangle.iou", "modulename": "multispectral.src.shapes", "qualname": "Rectangle.iou", "kind": "function", "doc": "<p>Intersection over Union</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.shapes.Rectangle.draw", "modulename": "multispectral.src.shapes", "qualname": "Rectangle.draw", "kind": "function", "doc": "<p>Draw the rectangle on the image</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">image</span>, </span><span class=\"param\"><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">)</span>, </span><span class=\"param\"><span class=\"n\">thickness</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.test_publisher", "modulename": "multispectral.src.test_publisher", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.utils", "modulename": "multispectral.src.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "multispectral.src.utils.prepare_image", "modulename": "multispectral.src.utils", "qualname": "prepare_image", "kind": "function", "doc": "<p>Get the correct channels for prediction and resize the image.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>im_aligned (np.array):</strong>  The aligned image.</li>\n<li><strong>channels (list):</strong>  List of channels or formulas to use.</li>\n<li><strong>is_complex (bool):</strong>  Whether the image is complex or not.</li>\n<li><strong>new_size (tuple):</strong>  New size for the image.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.array: The prepared image.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img_aligned</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">channels</span><span class=\"p\">:</span> <span class=\"n\">List</span>,</span><span class=\"param\">\t<span class=\"n\">is_complex</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">new_size</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.utils.greedy_grouping", "modulename": "multispectral.src.utils", "qualname": "greedy_grouping", "kind": "function", "doc": "<p>Merge intersecting rectangles.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>rectangles (list):</strong>  List of rectangles to merge.</li>\n<li><strong>image_shape (tuple):</strong>  Shape of the image (height, width).</li>\n<li><strong>resize_factor (float):</strong>  Factor to enlarge the rectangles for merging.</li>\n<li><strong>visualize (bool):</strong>  Whether to visualize the merging process.</li>\n<li><strong>confidences(list):</strong>  Confidences for the bbs</li>\n</ul>\n\n<p>Returns: tuple of\n    merged_rectangles (list): List of merged rectangles.\n    merged_rectangles_mask (np.array): Visualisation of the merged rectangles.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">rectangles</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">shapes</span><span class=\"o\">.</span><span class=\"n\">Rectangle</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">image_shape</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span>,</span><span class=\"param\">\t<span class=\"n\">resize_factor</span><span class=\"o\">=</span><span class=\"mf\">1.5</span>,</span><span class=\"param\">\t<span class=\"n\">visualize</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">confidences</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.utils.get_real_piles_size", "modulename": "multispectral.src.utils", "qualname": "get_real_piles_size", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">im_shape</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">altitude</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">cam_hfov</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">cam_vfov</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">rectangles</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.src.utils.time_decorator", "modulename": "multispectral.src.utils", "qualname": "time_decorator", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.train", "modulename": "multispectral.train", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "multispectral.train.dataset_creation", "modulename": "multispectral.train.dataset_creation", "kind": "module", "doc": "<p>Scripts for creating datasets and training YOLO models for multispectral images.</p>\n"}, {"fullname": "multispectral.train.dataset_creation.augment_dataset", "modulename": "multispectral.train.dataset_creation.augment_dataset", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "multispectral.train.dataset_creation.augment_dataset.transforms", "modulename": "multispectral.train.dataset_creation.augment_dataset", "qualname": "transforms", "kind": "variable", "doc": "<p></p>\n", "default_value": "Compose([\n  RandomShadow(p=0.3, shadow_roi=(0.0, 0.5, 1.0, 1.0), num_shadows_limit=(1, 2), shadow_dimension=5),\n  RandomBrightnessContrast(p=0.5, brightness_limit=(-0.2, 0.2), contrast_limit=(-0.2, 0.2), brightness_by_max=True),\n  ShiftScaleRotate(p=0.5, shift_limit_x=(-0.1, 0.1), shift_limit_y=(-0.1, 0.1), scale_limit=(-0.050000000000000044, 0.050000000000000044), rotate_limit=(-30, 30), interpolation=1, border_mode=2, value=0.0, mask_value=0.0, rotate_method=&#x27;largest_box&#x27;),\n  HorizontalFlip(p=0.5),\n  VerticalFlip(p=0.5),\n  ElasticTransform(p=0.3, interpolation=1, border_mode=4, value=None, mask_value=None, alpha=0.8, sigma=20.0, approximate=False, same_dxdy=False),\n  RandomSizedBBoxSafeCrop(p=0.5, erosion_rate=0.2, height=608, width=800, interpolation=1),\n  OneOf([\n    GaussianBlur(p=0.2, blur_limit=(3, 5), sigma_limit=(0, 0)),\n    MedianBlur(p=0.2, blur_limit=(3, 3)),\n    MotionBlur(p=0.4, blur_limit=(3, 5), allow_shifted=True),\n  ], p=0.5),\n  OneOf([\n    MultiplicativeNoise(p=0.5, multiplier=(0.9, 1.1), elementwise=False, per_channel=True),\n    GaussNoise(p=0.5, var_limit=(10, 30), per_channel=True, mean=0.0, noise_scale_factor=1.0),\n  ], p=0.5),\n  CoarseDropout(p=0.3, fill_value=0.0, mask_fill_value=None, num_holes_range=(3, 3), hole_height_range=(0.1, 0.1), hole_width_range=(0.1, 0.1)),\n], p=1.0, bbox_params={&#x27;format&#x27;: &#x27;yolo&#x27;, &#x27;label_fields&#x27;: [&#x27;class_labels&#x27;], &#x27;min_area&#x27;: 0.0, &#x27;min_visibility&#x27;: 0.0, &#x27;min_width&#x27;: 0.0, &#x27;min_height&#x27;: 0.0, &#x27;check_each_transform&#x27;: True, &#x27;clip&#x27;: False}, keypoint_params=None, additional_targets={}, is_check_shapes=True)"}, {"fullname": "multispectral.train.dataset_creation.augment_dataset.pre_augment_dataset", "modulename": "multispectral.train.dataset_creation.augment_dataset", "qualname": "pre_augment_dataset", "kind": "function", "doc": "<p>Generate augmented images/labels and save to train_aug.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">base_dir</span>, </span><span class=\"param\"><span class=\"n\">n_augment</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.train.dataset_creation.check_annotations", "modulename": "multispectral.train.dataset_creation.check_annotations", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "multispectral.train.dataset_creation.check_annotations.draw_boxes_one_class", "modulename": "multispectral.train.dataset_creation.check_annotations", "qualname": "draw_boxes_one_class", "kind": "function", "doc": "<p>Draw bounding boxes in yolo format on image</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">pool_image</span>,</span><span class=\"param\">\t<span class=\"n\">image_path</span>,</span><span class=\"param\">\t<span class=\"n\">label_path</span>,</span><span class=\"param\">\t<span class=\"n\">filter_class</span>,</span><span class=\"param\">\t<span class=\"n\">color</span>,</span><span class=\"param\">\t<span class=\"n\">image_shape</span>,</span><span class=\"param\">\t<span class=\"n\">correction</span>,</span><span class=\"param\">\t<span class=\"n\">scale</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.train.dataset_creation.check_annotations.get_wrong_on_each_photo", "modulename": "multispectral.train.dataset_creation.check_annotations", "qualname": "get_wrong_on_each_photo", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">wrong</span>, </span><span class=\"param\"><span class=\"n\">group</span>, </span><span class=\"param\"><span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;out&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.train.dataset_creation.check_annotations.show_class_in_normalised_pool", "modulename": "multispectral.train.dataset_creation.check_annotations", "qualname": "show_class_in_normalised_pool", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">photo_names</span>,</span><span class=\"param\">\t<span class=\"n\">n_objects</span>,</span><span class=\"param\">\t<span class=\"n\">raw_palette</span>,</span><span class=\"param\">\t<span class=\"n\">image_bbs</span>,</span><span class=\"param\">\t<span class=\"n\">group</span>,</span><span class=\"param\">\t<span class=\"n\">config</span>,</span><span class=\"param\">\t<span class=\"n\">class_id</span>,</span><span class=\"param\">\t<span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;out&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.train.dataset_creation.check_annotations.get_correction_and_scale", "modulename": "multispectral.train.dataset_creation.check_annotations", "qualname": "get_correction_and_scale", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span>, </span><span class=\"param\"><span class=\"n\">image_fn</span>, </span><span class=\"param\"><span class=\"n\">desired_width</span>, </span><span class=\"param\"><span class=\"n\">desired_height</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.train.dataset_creation.create_dataset", "modulename": "multispectral.train.dataset_creation.create_dataset", "kind": "module", "doc": "<p>Read the annotated images, merge piles and export them to a new daatset with train, test, val splits</p>\n"}, {"fullname": "multispectral.train.dataset_creation.create_dataset.merge_rectangles", "modulename": "multispectral.train.dataset_creation.create_dataset", "qualname": "merge_rectangles", "kind": "function", "doc": "<p>merge rectangles that overlap to bigger rectangles</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">rects</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">shapes</span><span class=\"o\">.</span><span class=\"n\">Rectangle</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">margin</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">shapes</span><span class=\"o\">.</span><span class=\"n\">Rectangle</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "multispectral.train.dataset_creation.create_dataset.read_all_datasets", "modulename": "multispectral.train.dataset_creation.create_dataset", "qualname": "read_all_datasets", "kind": "function", "doc": "<p>Read every annotation in every image from subdirectories of dataset_path.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dataset_path (str, optional):</strong>  Path to the dataset containing subdirectories with images and annotations.</li>\n<li><strong>excluded_litter (list, optional):</strong>  List of litter classes to exclude from the result.</li>\n<li><strong>excluded_sets (list, optional):</strong>  List of subdatasets to exclude from the result.</li>\n<li><strong>channel (str, optional):</strong>  Image channel to use as a base.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pd.DataFrame: DataFrame containing subdataset, image_path, annot_path (path to annotation file),\n  and annots (all Rectangles corresponding to annotated litter).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dataset_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;/home/anna/Datasets/annotated&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">excluded_litter</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;grass_bio_brown&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;flake_PE_black&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;flake_PE_transparent&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">excluded_sets</span><span class=\"o\">=</span><span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">channel</span><span class=\"o\">=</span><span class=\"s1\">&#39;RGB.png&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">has_aug</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "multispectral.train.dataset_creation.create_dataset.apply_formula", "modulename": "multispectral.train.dataset_creation.create_dataset", "qualname": "apply_formula", "kind": "function", "doc": "<p>Apply formula to the image.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>img_aligned (np.array):</strong>  Multispectral image to apply the formula to.</li>\n<li><strong>formula (str):</strong>  Formula to apply to the image.</li>\n<li><strong>is_complex (bool, optional):</strong>  True means the formula is more complex and the image is normalized to [0, 255] before applying the formula.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.array: Image with the formula applied.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">im_aligned</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">formula</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">is_complex</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "multispectral.train.dataset_creation.create_dataset.create_files", "modulename": "multispectral.train.dataset_creation.create_dataset", "qualname": "create_files", "kind": "function", "doc": "<p>Copy images and annotations to the new locations.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dataset_path (str):</strong>  Path to directory with new dataset.</li>\n<li><strong>df (pd.DataFrame):</strong>  Contains image_path (of the original image) and \"piles\" (Rectangles with annotations).</li>\n<li><strong>split (str):</strong>  Train, test, or val (or other).</li>\n<li><strong>new_image_size (tuple):</strong>  Values to resize the image with.</li>\n<li><strong>channels (list, optional):</strong>  Channel names or formulas to apply to the image. If not specified, the image is resized and saved as RGB.</li>\n<li><strong>is_complex (bool, optional):</strong>  True means the formula in channels is more complex and the image is normalized to [0, 255] before applying the formula.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dataset_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">split</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">new_image_size</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span>,</span><span class=\"param\">\t<span class=\"n\">channels</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;R&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;G&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">is_complex</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "multispectral.train.dataset_creation.create_dataset.export_splits", "modulename": "multispectral.train.dataset_creation.create_dataset", "qualname": "export_splits", "kind": "function", "doc": "<p>Create new dataset according to the splits</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>train_df (pd.DataFrame):</strong>  df with train split.</li>\n<li><strong>val_df (pd.DataFrame):</strong>  df with val split.</li>\n<li><strong>test_df (pd.DataFrame):</strong>  df with test split.</li>\n<li><strong>df (pd.DataFrame):</strong>  Contains image_path (of the original image) and \"piles\" (Rectangles with annotations).</li>\n<li><strong>new_dataset_path (str):</strong>  Path to directory with new dataset.</li>\n<li><strong>new_image_size (tuple):</strong>  Values to resize the image with.</li>\n<li><strong>channels (list, optional):</strong>  Channel names or formulas to apply to the image. If not specified, the image is resized and saved as RGB.</li>\n<li><strong>is_complex (bool, optional):</strong>  True means the formula is more complex and the image is normalized to [0, 255] before applying the formula.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">train_df</span>,</span><span class=\"param\">\t<span class=\"n\">val_df</span>,</span><span class=\"param\">\t<span class=\"n\">test_df</span>,</span><span class=\"param\">\t<span class=\"n\">df</span>,</span><span class=\"param\">\t<span class=\"n\">new_dataset_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">new_image_size</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span>,</span><span class=\"param\">\t<span class=\"n\">channels</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;R&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;G&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">is_complex</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "multispectral.train.dataset_creation.create_dataset.main", "modulename": "multispectral.train.dataset_creation.create_dataset", "qualname": "main", "kind": "variable", "doc": "<p>Create a new dataset with train, test, val splits.</p>\n", "default_value": "&lt;Command main&gt;"}, {"fullname": "multispectral.train.dataset_creation.export_aligned_channels", "modulename": "multispectral.train.dataset_creation.export_aligned_channels", "kind": "module", "doc": "<p>Export aligned channels, RGB and meanRE images for anotation from a config</p>\n\n<p>You can run with multiple configs at once with python3 -m dataset_creation.export_aligned_channels --multirun processing=\"mandrac2025_5m,...\"\nThe configs should be in the 'conf/processing' folder</p>\n"}, {"fullname": "multispectral.train.dataset_creation.export_aligned_channels.main", "modulename": "multispectral.train.dataset_creation.export_aligned_channels", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cfg</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.train.dataset_creation.export_coco_to_yolo", "modulename": "multispectral.train.dataset_creation.export_coco_to_yolo", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "multispectral.train.dataset_creation.export_photo_type", "modulename": "multispectral.train.dataset_creation.export_photo_type", "kind": "module", "doc": "<p>Export aligned images in RGB and BReNir format for visual checking and further processing.</p>\n\n<p>You can run with multiple configs at once with python3 -m dataset_creation.export_photo_type --multirun processing=\"mandrac2025_5m,...\"\nThe configs should be in the 'conf/processing' folder</p>\n"}, {"fullname": "multispectral.train.dataset_creation.export_photo_type.threshold_percentiles", "modulename": "multispectral.train.dataset_creation.export_photo_type", "qualname": "threshold_percentiles", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.train.dataset_creation.export_photo_type.main", "modulename": "multispectral.train.dataset_creation.export_photo_type", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cfg</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.train.dataset_creation.get_configs_from_bag_files", "modulename": "multispectral.train.dataset_creation.get_configs_from_bag_files", "kind": "module", "doc": "<p>Create a config file for each altitude based on the images in a rosbag file.</p>\n\n<p>Remember to init ros before executing this script.</p>\n"}, {"fullname": "multispectral.train.dataset_creation.merge_index_and_RGB_dataset", "modulename": "multispectral.train.dataset_creation.merge_index_and_RGB_dataset", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "multispectral.train.dataset_creation.merge_index_and_RGB_dataset.main", "modulename": "multispectral.train.dataset_creation.merge_index_and_RGB_dataset", "qualname": "main", "kind": "variable", "doc": "<p>Combine the index dataset with the RGB train set. The val and test sets remain the same.\ne.g. from ghost-net-whole_random and RGB_whole_random to ghost-net-RGB-and-whole_random</p>\n\n<p>Args:\ndataset_type (str): Train/test dataset type (e.g. _whole_random)\nindex_dataset (str): Name of dataset used for creating the index (e.g. ghost-net-)</p>\n\n<p>Returns:\nNone</p>\n", "default_value": "&lt;Command main&gt;"}, {"fullname": "multispectral.train.dataset_creation.merge_labels", "modulename": "multispectral.train.dataset_creation.merge_labels", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "multispectral.train.dataset_creation.merge_labels.merge_bbs_from_all_channels", "modulename": "multispectral.train.dataset_creation.merge_labels", "qualname": "merge_bbs_from_all_channels", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">common_fn</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">out_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.train.dataset_creation.merge_original_names", "modulename": "multispectral.train.dataset_creation.merge_original_names", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "multispectral.train.model_optimization", "modulename": "multispectral.train.model_optimization", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "multispectral.train.model_optimization.iou", "modulename": "multispectral.train.model_optimization", "qualname": "iou", "kind": "function", "doc": "<p>Compute Intersection over Union (IoU) between two bounding boxes.\nbox1, box2: Rectangle(x_l, y_b, x_r, y_t)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">box1</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">shapes</span><span class=\"o\">.</span><span class=\"n\">Rectangle</span>, </span><span class=\"param\"><span class=\"n\">box2</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">shapes</span><span class=\"o\">.</span><span class=\"n\">Rectangle</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "multispectral.train.model_optimization.calculate_ap", "modulename": "multispectral.train.model_optimization", "qualname": "calculate_ap", "kind": "function", "doc": "<p>Calculate Average Precision (AP) for a single IoU threshold for one class.\nAssumes that the predictions don't have confidences.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">gt_boxes</span>, </span><span class=\"param\"><span class=\"n\">pred_boxes</span>, </span><span class=\"param\"><span class=\"n\">iou_threshold</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>, </span><span class=\"param\"><span class=\"n\">verb</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.train.model_optimization.mean_ap", "modulename": "multispectral.train.model_optimization", "qualname": "mean_ap", "kind": "function", "doc": "<p>Calculate mean Average Precision (mAP) over multiple IoU thresholds.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">gt_boxes_all_images</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">shapes</span><span class=\"o\">.</span><span class=\"n\">Rectangle</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">pred_boxes_all_images</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">shapes</span><span class=\"o\">.</span><span class=\"n\">Rectangle</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">iou_thresholds</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">0.5</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">verb</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.train.model_optimization.evaluate_detector", "modulename": "multispectral.train.model_optimization", "qualname": "evaluate_detector", "kind": "function", "doc": "<p>Evaluate the detector using mean IoU with ground truth bounding boxes.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">images_paths</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">ground_truth_boxes</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">shapes</span><span class=\"o\">.</span><span class=\"n\">Rectangle</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">verb</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.train.model_optimization.read_bboxes", "modulename": "multispectral.train.model_optimization", "qualname": "read_bboxes", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">label_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">image_width</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">image_height</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">shapes</span><span class=\"o\">.</span><span class=\"n\">Rectangle</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "multispectral.train.model_optimization.optimize_params_dog", "modulename": "multispectral.train.model_optimization", "qualname": "optimize_params_dog", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cfg</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.train.quantize_model", "modulename": "multispectral.train.quantize_model", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "multispectral.train.quantize_model.test_improvement", "modulename": "multispectral.train.quantize_model", "qualname": "test_improvement", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model_fp32</span>, </span><span class=\"param\"><span class=\"n\">model_fp16</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.train.quantize_model.time_model", "modulename": "multispectral.train.quantize_model", "qualname": "time_model", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.train.run_create_dataset", "modulename": "multispectral.train.run_create_dataset", "kind": "module", "doc": "<p>Create datasets for all the developed formulas and send them to the remote host</p>\n"}, {"fullname": "multispectral.train.run_create_dataset.run_job", "modulename": "multispectral.train.run_create_dataset", "qualname": "run_job", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">job</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.train.yolo", "modulename": "multispectral.train.yolo", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "multispectral.train.yolo.read_ground_truth", "modulename": "multispectral.train.yolo", "qualname": "read_ground_truth", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">results</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "multispectral.train.yolo.show_gt_and_pred", "modulename": "multispectral.train.yolo", "qualname": "show_gt_and_pred", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">results</span>, </span><span class=\"param\"><span class=\"n\">gt_boxes</span>, </span><span class=\"param\"><span class=\"n\">additional_boxes</span><span class=\"o\">=</span><span class=\"p\">[]</span>, </span><span class=\"param\"><span class=\"n\">n_cols</span><span class=\"o\">=</span><span class=\"mi\">4</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();